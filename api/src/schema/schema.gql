scalar Point
scalar DateTime
scalar PointInput

"""
User will also contain spaces[], comments[], answers[], questions[]
Drawback: Password is being stored as plain string. Not able to figure out JWT
"""
type User {
	_id: ID!
	name: String!
	email: String!
	password: String!
}

type Mutation {
	createUser(
		name: String!
		email: String!
		password: String!
	): UserMutationResponse
	signInUser(email: String!, password: String!): UserMutationResponse
}

type Query {
	userCount: Int! @cypher(statement: "MATCH (u:User) RETURN COUNT(u)")
	user(_id: String!): User
		@cypher(
			statement: """
			MATCH (u: User {_id: $_id}) RETURN u
			"""
		)
}

"""
Response for any mutation related to the user type
User: The user that has been created or updated

Rest of the fields complete from MutationResponse interface
"""
type UserMutationResponse implements MutationResponse {
	error: Error
	operation: String!
	code: String!
	status: String!
	user: [User]
	token: String
}

"""
User: The user that has been created or updated
Error: If any error occurred, this will contain a value

These values come from the Response interface
Code: Error code to denote exactly what happened
Operaton: What operation was being performed
Status: Denoting if the operation was completed or resulted in an error
"""
interface MutationResponse implements Response {
	error: Error
	operation: String!
	code: String!
	status: String!
	token: String
}

"""
Message: The user side message to display
Code: Error code to denote exactly what happened
Operaton: What operation was being performed
"""
type Error {
	message: String!
}

"""
Interface is used to return the responses for mutations
Code: Error code to denote exactly what happened
Operaton: What operation was being performed
Status: Denoting if the operation was completed or resulted in an error
"""
interface Response {
	operation: String!
	code: String!
	status: String!
}
